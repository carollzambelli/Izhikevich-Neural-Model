// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/13/2018 20:09:22"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          modulo_IZ_v3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module modulo_IZ_v3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] I_16;
reg [15:0] U_ini16;
reg [15:0] V_ini16;
reg clk;
reg go;
reg reset;
// wires                                               
wire [15:0] Ufinal;
wire [15:0] Vfinal;
wire ready;

// assign statements (if any)                          
modulo_IZ_v3 i1 (
// port map - connection between master ports and signals/registers   
	.I_16(I_16),
	.U_ini16(U_ini16),
	.Ufinal(Ufinal),
	.V_ini16(V_ini16),
	.Vfinal(Vfinal),
	.clk(clk),
	.go(go),
	.ready(ready),
	.reset(reset)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #10000 1'b0;
end 

// go
initial
begin
	go = 1'b0;
	go = #10000 1'b1;
	go = #10000 1'b0;
end 
// V_ini16[ 15 ]
initial
begin
	V_ini16[15] = 1'b1;
end 
// V_ini16[ 14 ]
initial
begin
	V_ini16[14] = 1'b1;
end 
// V_ini16[ 13 ]
initial
begin
	V_ini16[13] = 1'b0;
end 
// V_ini16[ 12 ]
initial
begin
	V_ini16[12] = 1'b1;
end 
// V_ini16[ 11 ]
initial
begin
	V_ini16[11] = 1'b0;
end 
// V_ini16[ 10 ]
initial
begin
	V_ini16[10] = 1'b1;
end 
// V_ini16[ 9 ]
initial
begin
	V_ini16[9] = 1'b0;
end 
// V_ini16[ 8 ]
initial
begin
	V_ini16[8] = 1'b0;
end 
// V_ini16[ 7 ]
initial
begin
	V_ini16[7] = 1'b0;
end 
// V_ini16[ 6 ]
initial
begin
	V_ini16[6] = 1'b1;
end 
// V_ini16[ 5 ]
initial
begin
	V_ini16[5] = 1'b1;
end 
// V_ini16[ 4 ]
initial
begin
	V_ini16[4] = 1'b0;
end 
// V_ini16[ 3 ]
initial
begin
	V_ini16[3] = 1'b0;
end 
// V_ini16[ 2 ]
initial
begin
	V_ini16[2] = 1'b0;
end 
// V_ini16[ 1 ]
initial
begin
	V_ini16[1] = 1'b0;
end 
// V_ini16[ 0 ]
initial
begin
	V_ini16[0] = 1'b0;
end 
// U_ini16[ 15 ]
initial
begin
	U_ini16[15] = 1'b1;
end 
// U_ini16[ 14 ]
initial
begin
	U_ini16[14] = 1'b1;
end 
// U_ini16[ 13 ]
initial
begin
	U_ini16[13] = 1'b0;
end 
// U_ini16[ 12 ]
initial
begin
	U_ini16[12] = 1'b0;
end 
// U_ini16[ 11 ]
initial
begin
	U_ini16[11] = 1'b1;
end 
// U_ini16[ 10 ]
initial
begin
	U_ini16[10] = 1'b0;
end 
// U_ini16[ 9 ]
initial
begin
	U_ini16[9] = 1'b1;
end 
// U_ini16[ 8 ]
initial
begin
	U_ini16[8] = 1'b1;
end 
// U_ini16[ 7 ]
initial
begin
	U_ini16[7] = 1'b0;
end 
// U_ini16[ 6 ]
initial
begin
	U_ini16[6] = 1'b0;
end 
// U_ini16[ 5 ]
initial
begin
	U_ini16[5] = 1'b0;
end 
// U_ini16[ 4 ]
initial
begin
	U_ini16[4] = 1'b0;
end 
// U_ini16[ 3 ]
initial
begin
	U_ini16[3] = 1'b0;
end 
// U_ini16[ 2 ]
initial
begin
	U_ini16[2] = 1'b0;
end 
// U_ini16[ 1 ]
initial
begin
	U_ini16[1] = 1'b0;
end 
// U_ini16[ 0 ]
initial
begin
	U_ini16[0] = 1'b0;
end 
// I_16[ 15 ]
initial
begin
	I_16[15] = 1'b0;
end 
// I_16[ 14 ]
initial
begin
	I_16[14] = 1'b1;
end 
// I_16[ 13 ]
initial
begin
	I_16[13] = 1'b0;
end 
// I_16[ 12 ]
initial
begin
	I_16[12] = 1'b0;
end 
// I_16[ 11 ]
initial
begin
	I_16[11] = 1'b1;
end 
// I_16[ 10 ]
initial
begin
	I_16[10] = 1'b0;
end 
// I_16[ 9 ]
initial
begin
	I_16[9] = 1'b0;
end 
// I_16[ 8 ]
initial
begin
	I_16[8] = 1'b1;
end 
// I_16[ 7 ]
initial
begin
	I_16[7] = 1'b0;
end 
// I_16[ 6 ]
initial
begin
	I_16[6] = 1'b0;
end 
// I_16[ 5 ]
initial
begin
	I_16[5] = 1'b0;
end 
// I_16[ 4 ]
initial
begin
	I_16[4] = 1'b0;
end 
// I_16[ 3 ]
initial
begin
	I_16[3] = 1'b0;
end 
// I_16[ 2 ]
initial
begin
	I_16[2] = 1'b0;
end 
// I_16[ 1 ]
initial
begin
	I_16[1] = 1'b0;
end 
// I_16[ 0 ]
initial
begin
	I_16[0] = 1'b0;
end 
endmodule

